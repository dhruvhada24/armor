name: 🧩 Deploy Backend to ECS + Frontend to S3

on:
  push:
    branches:
      - devops
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPO: 653765021347.dkr.ecr.ap-south-1.amazonaws.com/armor-backend
      ECS_CLUSTER: armor
      ECS_SERVICE: armor
      S3_BUCKET: armor-frontend-prod
      CLOUDFRONT_DISTRIBUTION_ID: E25JXYZ1234567  # replace with your actual ID

    steps:
      # 🧠 Checkout repository
      - name: 🧠 Checkout code
        uses: actions/checkout@v4

      # 🔐 Configure AWS credentials
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 🧹 Ensure Dockerfile path & repo structure
      - name: 🧹 Verify backend folder structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of repo root:"
          ls -la
          echo "Contents of backend directory:"
          ls -la backend

      # 📦 Build Docker image for backend
      - name: 📦 Build Docker image for backend
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t armor-backend \
            -f ./backend/Dockerfile \
            ./backend

      # 🪣 Tag & Push Docker image to Amazon ECR
      - name: 🪣 Push Docker image to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
          docker tag armor-backend:latest $ECR_REPO:latest
          docker push $ECR_REPO:latest

      # 🚀 Update ECS Service
      - name: 🚀 Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

      # 🎨 Build Frontend
      - name: 🎨 Build Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      # ☁️ Deploy Frontend to S3
      - name: ☁️ Deploy Frontend to S3
        run: |
          aws s3 sync frontend/build s3://$S3_BUCKET --delete

      # 🔁 Invalidate CloudFront Cache (optional but recommended)
      - name: 🔁 Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"

