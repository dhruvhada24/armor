name: ðŸš€ Deploy ARMOR Full Stack

on:
  push:
    branches:
      - devops

jobs:
  backend-deploy:
    name: ðŸ§© Deploy Backend to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          docker buildx build --platform linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest --push ./backend

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

  frontend-deploy:
    name: ðŸŽ¨ Deploy Frontend to S3 + CloudFront
    runs-on: ubuntu-latest
    needs: backend-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies and build
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Sync build to S3
        run: |
          aws s3 sync ./frontend/build s3://${{ secrets.S3_BUCKET }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

